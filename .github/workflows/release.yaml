name: Release

on:
  push:
    tags:
      - "v*.*.*"

env:
  application-name: Application
  updater-name: Updater
  build-config: Release

jobs:
  update-version-in-source:
    runs-on: windows-latest

    steps:
    - name: checkout
      uses: actions/checkout@v2

    # prepare version update
    - name: extract tag
      uses: olegtarasov/get-tag@v2.1
      id: tagName
    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    # update versions locally
    - name: update application version
      run: python buildscripts/update_version.py --tagname ${{ steps.tagName.outputs.tag }} --project-file ${{ env.application-name }}/${{ env.application-name }}.csproj
    - name: update updater version
      run: python buildscripts/update_version.py --tagname ${{ steps.tagName.outputs.tag }} --project-file ${{ env.updater-name }}/${{ env.updater-name }}.csproj
    - name: push updated version number
      uses: test-room-7/action-update-file@v1
      with:
          file-path: |
              ${{ env.application-name }}/${{ env.application-name }}.csproj
              ${{ env.updater-name }}/${{ env.updater-name }}.csproj
          commit-msg: Update version number
          github-token: ${{ secrets.GITHUB_TOKEN }}
    
    # create empty release
    - name: create empty release
      uses: softprops/action-gh-release@v1

  
  create-release:
    needs: update-version-in-source
    runs-on: windows-latest
    strategy: 
      matrix:
        include: 
        - name: Windows
          RID: win-64
        - name: Linux
          RID: linux-x64
        - name: Mac
          RID: osx-x64
    steps:
      # checkout
      - name: checkout
        uses: actions/checkout@v2
      # extract tag
      - name: extract tag
        uses: olegtarasov/get-tag@v2.1
        id: tagName
      # setup runtime
      - name: Install .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
    
      # publish program to {application-name}/{os_name}
      - name: publish program ${{ matrix.name }}
        run: dotnet publish ${{ env.application-name }} --configuration ${{ env.build-config }} -r ${{ matrix.RID }} --no-self-contained -o ${{ env.application-name }}/${{ matrix.name }}
      # publish updater to {application-name}/{os_name}
      - name: publish updater ${{ matrix.name }}
        run: dotnet publish ${{ env.updater-name }} --configuration ${{ env.build-config }} -r ${{ matrix.RID }} --no-self-contained -o ${{ env.application-name }}/${{ matrix.name }}
      # zip {application-name}/{os_name} into a zip file where the root folder has name {application-name}
      - name: zip ${{ matrix.name }} build
        uses: papeloto/action-zip@v1
        with:
          files: ${{ env.application-name }}/${{ matrix.name }}
          dest: Releases/${{ env.application-name }}-${{ matrix.name }}.zip
          recursive: false

      - name: update release
        id: update_release
        uses: tubone24/update_release@v1.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: add ${{ matrix.name }} to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
          TAG_NAME: ${{ steps.tagName.outputs.tag }}
        with:
          upload_url: ${{ steps.update_release.outputs.upload_url }}
          asset_path: ./Releases/${{ env.application-name }}-${{ matrix.name }}.zip
          asset_name: ${{ env.application-name }}-${{ matrix.name }}.zip
          asset_content_type: application/zip